'computer program memory can be largely categorised into two sections: read-only and read/write.'

**code segment** ('text segment'): executable code, read-only, fixed size.

**data segment**: initialised static variables (global variables and local static variables)

**BSS segment**: uninitialised static data (global variables and local static variables that are initialised to zero or do not have explicit initialisation in source code)

**heap segment**: dynamically allocated memory. commonly begins at the end of the BSS segment and grows to larger addresses from there. (managed by malloc, calloc realloc and free)

**stack segment**: call stack (LIFO structure). typically located in the higher parts of memory. stack pointer register (sp?) tracks the top of the stack and is adjusted when things are pushed or popped. stack frames exist here (values (automatica variables, etc.) pushed for each function call). a stack frame consists of at minimum a return address. traditionally, the stack and the heap grew towards each other; when the two pointers met 'free memory' was exhausted. now apparently they're often more freely placed, but still typically grow in a converging direction. on x86 architecture the stack grows towards address zero. on some other architectures it grows in the opposite direction... not sure about ARM... (I'm using Apple silicon).

[global variables are always static in the sense that they persist for the lifetime of the program. local variables by default are automatic: they exist on the call stack and are forgotten when the enclosing function returns to where it was called from. but we can also declare local static variables that have local scope (they are only accessible from their enclosing scope and do not interfere with anything outside, but they are not deallocated when the function finishes and their value persists. it'll be available the next time the function is called).

[if the code segment is not read-only, then the particular architecture allows self-modifying code.]
